rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // ========== USERS COLLECTION ==========
    match /users/{userId} {
      // Allow create if the user is creating their own document and passes validation
      allow create: if isOwner(userId)
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0
        && request.resource.data.email is string
        && request.resource.data.email == request.auth.token.email
        && request.resource.data.email.matches('.*@.*\\..*')
        && request.resource.data.onboarded == false
        && request.resource.data.lifestage == null
        && request.resource.data.subscription is map
        && request.resource.data.subscription.plan is string
        && request.resource.data.subscription.status is string
        && request.resource.data.subscription.startDate is timestamp
        && request.resource.data.children is list
        && request.resource.data.children.size() == 0
        && request.resource.data.createdAt is timestamp
        && request.resource.data.onboarded is bool;

      // Only the owner can read, update, or delete their own document
      allow read, update, delete: if isOwner(userId);
    }

    // ========== CHILDREN COLLECTION ==========
    match /children/{childId} {
      // Users can read children documents they own
      allow read: if request.auth != null && request.auth.uid == resource.data.parentId;

      // Users can create children documents for themselves
      allow create: if request.auth != null 
        && request.resource.data.parentId == request.auth.uid
        && request.resource.data.keys().hasAll(['parentId', 'name', 'dateOfBirth', 'gender', 'createdAt', 'updatedAt'])
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0
        && (request.resource.data.dateOfBirth is timestamp || request.resource.data.dateOfBirth is string)
        && request.resource.data.gender is string
        && (request.resource.data.gender in ['Boy', 'Girl', "Don't know yet", 'male', 'female', 'prefer_not_to_say'])
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp;

      // Users can update or delete children documents they own
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.parentId;
    }

    // ========== FUTURE COLLECTIONS ==========
    // match /journal/{journalId} {
    //   allow read: if request.auth != null && request.auth.uid == resource.data.userId;
    //   allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    //   allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    // }

    // match /subscriptions/{subscriptionId} {
    //   allow read: if request.auth != null && request.auth.uid == resource.data.userId;
    //   allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    //   allow update: if request.auth != null && request.auth.uid == resource.data.userId;
    // }
  }
}
